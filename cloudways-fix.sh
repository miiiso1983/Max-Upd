#!/bin/bash

# =============================================================================
# MaxCon SaaS - Cloudways Emergency Fix Script
# =============================================================================

echo "๐จ ุฅุตูุงุญ ูุดุงูู Cloudways..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# Step 1: Check and create .env file
print_step "1. ูุญุต ููู .env..."

if [ ! -f .env ]; then
    if [ -f .env.cloudways ]; then
        cp .env.cloudways .env
        print_status "ุชู ูุณุฎ .env ูู .env.cloudways"
    elif [ -f .env.example ]; then
        cp .env.example .env
        print_status "ุชู ูุณุฎ .env ูู .env.example"
    else
        print_error "ูุง ููุฌุฏ ููู .env ุฃู .env.example!"
        exit 1
    fi
else
    print_status "ููู .env ููุฌูุฏ"
fi

# Step 2: Generate APP_KEY if missing
print_step "2. ูุญุต APP_KEY..."

if ! grep -q "APP_KEY=base64:" .env; then
    print_status "ุชูููุฏ APP_KEY..."
    php artisan key:generate --force
    if [ $? -eq 0 ]; then
        print_status "ุชู ุชูููุฏ APP_KEY ุจูุฌุงุญ"
    else
        print_error "ูุดู ูู ุชูููุฏ APP_KEY"
        # Manual key generation
        APP_KEY=$(openssl rand -base64 32)
        sed -i "s/APP_KEY=.*/APP_KEY=base64:$APP_KEY/" .env
        print_status "ุชู ุชูููุฏ APP_KEY ูุฏููุงู"
    fi
else
    print_status "APP_KEY ููุฌูุฏ"
fi

# Step 3: Set proper environment
print_step "3. ุชุนููู ุจูุฆุฉ ุงูุฅูุชุงุฌ..."

sed -i 's/APP_ENV=.*/APP_ENV=production/' .env
sed -i 's/APP_DEBUG=.*/APP_DEBUG=false/' .env
print_status "ุชู ุชุนููู ุจูุฆุฉ ุงูุฅูุชุงุฌ"

# Step 4: Clear all caches
print_step "4. ุชูุธูู ุงูุฐุงูุฑุฉ ุงููุคูุชุฉ..."

php artisan config:clear
php artisan cache:clear
php artisan route:clear
php artisan view:clear
php artisan event:clear

print_status "ุชู ุชูุธูู ุฌููุน ุงูุฐุงูุฑุฉ ุงููุคูุชุฉ"

# Step 5: Set proper permissions
print_step "5. ุชุนููู ุงูุฃุฐููุงุช..."

chmod -R 755 storage bootstrap/cache
chmod -R 775 storage/logs
chmod -R 775 storage/framework

print_status "ุชู ุชุนููู ุงูุฃุฐููุงุช"

# Step 6: Optimize for production
print_step "6. ุชุญุณูู ููุฅูุชุงุฌ..."

php artisan config:cache
php artisan route:cache
php artisan view:cache

print_status "ุชู ุชุญุณูู ุงูุชุทุจูู ููุฅูุชุงุฌ"

# Step 7: Create storage link
print_step "7. ุฅูุดุงุก ุฑุงุจุท ุงูุชุฎุฒูู..."

if [ ! -L public/storage ]; then
    php artisan storage:link
    print_status "ุชู ุฅูุดุงุก ุฑุงุจุท ุงูุชุฎุฒูู"
else
    print_status "ุฑุงุจุท ุงูุชุฎุฒูู ููุฌูุฏ"
fi

# Step 8: Test application
print_step "8. ุงุฎุชุจุงุฑ ุงูุชุทุจูู..."

php artisan about > /dev/null 2>&1
if [ $? -eq 0 ]; then
    print_status "ุงูุชุทุจูู ูุนูู ุจุดูู ุตุญูุญ โ"
else
    print_warning "ูุฏ ุชููู ููุงู ูุดุงูู ูู ุงูุชุทุจูู"
fi

echo
echo "=============================================="
echo "๐ ุชู ุฅุตูุงุญ ูุดุงูู Cloudways!"
echo "=============================================="
echo
echo "๐ ุงูุฎุทูุงุช ุงูุชุงููุฉ:"
echo "1. ุชุญูู ูู ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช ูู .env"
echo "2. ูู ุจุชุดุบูู: php artisan migrate --force"
echo "3. ุงุฎุชุจุฑ ุงููููุน ูู ุงููุชุตูุญ"
echo
echo "๐ง ุฅุฐุง ุงุณุชูุฑุช ุงููุดุงูู:"
echo "1. ุชุญูู ูู PHP extensions ูู Cloudways"
echo "2. ุชุฃูุฏ ูู ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช"
echo "3. ุฑุงุฌุน ุณุฌูุงุช ุงูุฃุฎุทุงุก"
echo
echo "โ ุงูุฅุตูุงุญ ููุชูู!"
